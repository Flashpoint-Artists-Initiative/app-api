name: Run PHPUnit Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published

jobs:
  php-tests:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php: [8.3]
        coverage: [xdebug]
    name: 'Tests - PHP ${{ matrix.php }}'

    services:
      mysql:
        image: mysql:8.1
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create JWT Tokens
        run: |
          mkdir storage/certs
          cat << EOF > storage/certs/jwt-rsa-4096-public.pem
          ${{ secrets.JWT_PUBLIC_KEY_CONTENTS }}
          EOF
          cat << EOF > storage/certs/jwt-rsa-4096-private.pem
          ${{ secrets.JWT_PRIVATE_KEY_CONTENTS }}
          EOF

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring json openssl
          coverage: ${{ matrix.coverage }}
          ini-values: memory_limit=-1

      - name: Install Composer dependencies
        uses: "ramsey/composer-install@v2"
        with:
          composer-options: "--prefer-dist --optimize-autoloader"

      - name: Execute tests
        run: vendor/bin/phpunit
        env:
          DB_USERNAME: root
          DB_PASSWORD: password
          JWT_PRIVATE_KEY: ${{ vars.JWT_PRIVATE_KEY }}
          JWT_PUBLIC_KEY: ${{ vars.JWT_PUBLIC_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          STRIPE_SECRET: ${{ secrets.TEST_STRIPE_SECRET }}
          STRIPE_PAYMENT_METHOD_CONFIG: ${{ vars.TESTING_STRIPE_PAYMENT_METHOD_CONFIG }}
          STRIPE_TAX_RATES: ${{ vars.TESTING_STRIPE_TAX_RATES }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}